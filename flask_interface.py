# -*- coding: utf-8 -*-
"""flask_interface.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Rzlw9sVof4cTfdkrFY6lzUbdFYWAfKNZ
"""

!pip install flask-ngrok

import tensorflow as tf
from flask_ngrok import run_with_ngrok
from flask import Flask,render_template,url_for,request
import pandas as pd

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.externals import joblib

from datetime import datetime
from os import listdir
from os.path import isfile, join

import librosa
import librosa.display

import numpy as np
import pandas as pd

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Conv2D, MaxPooling2D, GlobalAveragePooling2D
from tensorflow.keras.utils import to_categorical 
from tensorflow.keras.callbacks import ModelCheckpoint

from sklearn.metrics import confusion_matrix, classification_report, roc_curve, auc
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

import matplotlib.pyplot as plt
import seaborn as sns

# Commented out IPython magic to ensure Python compatibility.
# %mkdir templates -p

# Commented out IPython magic to ensure Python compatibility.
# #html code
# %%writefile templates/Index.html
# <!DOCTYPE html>
# <html>
# <head>
# 	<title>Home</title>
# 	<style>
#      body {
#             background-image: url("https://cdn2.poz.com/75475_CHWi-19-033.jpg_53d0cc73-8999-4386-969b-14dbf89ee16a.jpeg");
#             text-align: center;
#             padding: 0px;
#             background-position:center top; background-repeat:no-repeat; background-size:cover;
#             margin:auto;
#         }
#     body{
#     font-family: 'Poppins',sans-serif;
# }
# 
# header h1{
#     height:80px;
#     padding-top:40px;
#     color:#000000;
# }
# 
# section{
#     margin-top: 100px;
#     padding: 0 30px;
#     text-align: justify;
#     line-height: 30px;
# }
# section h1{
#     font-size: 42px;
#     text-align: center;
#     margin: 50px 0;
#     line-height:50px;
# }
# .text-box h1{
#     font-weight: 400;
#     font-size: 35px;
#     letter-spacing: 1px;
# }
# textarea{
#     height:150px;
#     width:70%;
#     font-size:20px;
#     border: 2px solid red;
#     border-radius: 6px;
# }
# 
# .ml-container h4{
# text-align:center;
# background-color: #f2f2f2;
# padding-top:10px;
# margin-top:4px;
# border-radius:15px;
# width:600px;
# height:30px;
# margin:auto;
# }
# 
# .choose-info{
# width: 500px;
# height: 50px;
# margin:auto;
# text-align: center;
# display:block;
# border-radius: 16px;
# font-size: 18px;
# background-color: green;
# color: white;
# }
# 
# .btn-info{
# width: 200px;
# height: 50px;
# margin:auto;
# text-align: center;
# display:block;
# border-radius: 16px;
# font-size: 18px;
# background-color: blue;
# color: white;
# }
#     </style>
# </head>
# <body>
# 
#     <header>
#         <div class="text-box">
#             <h1><b>Lung Sound Classifier</b></h1>
#         </div>
#     </header>
#     <br>
# 	<div class="ml-container">
# 
# 		<form action="{{ url_for('predict')}}" method="POST">
#         <br>
#     <input type = "file" class="choose-info" accept =".wav" id = 'audio' name = "file" />    
# 		<br/>
# 
# 		<input type="submit" class="btn-info" value="Submit">
# 		</form>
#     </div>
#     <br>
# 
#     </div>
#     <br>
# 
# 	<div class="results">
# 
# 
# 	<br><br><h1><font-color="black">Predicted class:{{ prediction }}</font><h1>	
# 	{% if prediction == 0%}
# 	<h2 style="color:red;">Patient has Bronchiectasis </h2>
# 	{% elif prediction == 1%}
# 	<h2 style="color:red;">Patient has Bronchiolitis</h2>
#   {% elif prediction == 2%}
# 	<h2 style="color:red;">Patient has COPD</h2>
#   {% elif prediction == 3%}
# 	<h2 style="color:green;">Patient is normal</h2>
#   {% elif prediction == 4%}
# 	<h2 style="color:red;">Patient has Pneumonia</h2>
#   {% elif prediction == 5%}
# 	<h2 style="color:red;">Patient has URTI</h2>
# 	{% endif %}
# 
# 	</div>
# 	
# 
# </body>
# </html>

#from google.colab import drive
#drive.mount('/content/drive')

mypath = "/content/drive/MyDrive/audio_and_txt_files"
filenames = [f for f in listdir(mypath) if (isfile(join(mypath, f)) and f.endswith('.wav'))] 
p_id_in_file = [] # patient IDs corresponding to each file
for name in filenames:
    p_id_in_file.append(int(name[:3]))

p_id_in_file = np.array(p_id_in_file)

#feature extraction
max_pad_len = 862
def extract_features(file_name):   
    try:
        audio, sample_rate = librosa.load(file_name, res_type='kaiser_fast', duration=20) 
        mfccs = librosa.feature.mfcc(y=audio, sr=sample_rate, n_mfcc=40)
        pad_width = max_pad_len - mfccs.shape[1]
        mfccs = np.pad(mfccs, pad_width=((0, 0), (0, pad_width)), mode='constant')
        return mfccs
    except Exception as e:
        print("Error encountered while parsing file: ", file_name)
        return None 
     
    return mfccs

model = tf.keras.models.load_model('/content/drive/MyDrive/my_model.h5')

# Show the model architecture
# model.summary()

#Flask interface

#load the model
app = Flask(__name__)
run_with_ngrok(app)

@app.route('/')
def Index():
  return render_template('Index.html')

@app.route('/predict',methods=['POST'])
def predict():

  if request.method == 'POST':
    file = request.form['file']
    #file1.save(file1.wav)
    audio='/content/drive/MyDrive/audio_and_txt_files/'+file
    data=extract_features(audio)
    feature=[]
    feature.append(data)
    feature = np.array(feature)
    feature = np.reshape(feature, (*feature.shape,1))
    preds = model.predict(feature)
    classpreds = np.argmax(preds, axis=1) # predicted classes 

  return render_template('Index.html',prediction=classpreds[0])



if __name__ == '__main__':
  app.run()